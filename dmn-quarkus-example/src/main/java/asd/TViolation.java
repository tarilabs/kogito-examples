/*
This file was automatically generated by the Drools DMN open source engine Strongly Typed facility.
Do not modify this file, as any modifications will be lost when invoking the facility again.
Do not rely on the generated class(es) implementation, as the actual implementations may change.
Generated on: 2020-07-23T17:41:20.837663+02:00[Europe/Rome]

*/
package asd;

/**
 * A representation of the DMN defined ItemDefinition type 'tViolation'.<br/>
 * <br/>
 * This has been automatically generated from the following DMN asset.<br/>
 * DMN namespace: https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF<br/>
 * DMN name: Traffic Violation<br/>
 *
 * @implNote
 * This file was automatically generated by the Drools DMN open source engine Strongly Typed facility.
 * Do not modify this file, as any modifications will be lost when invoking the facility again.
 * Do not rely on the generated class(es) implementation, as the actual implementations may change.
 * Generated on: 2020-07-23T17:41:20.837663+02:00[Europe/Rome]
 *
 * <br/>
 */
public class TViolation implements java.io.Serializable, org.kie.dmn.api.core.FEELPropertyAccessible {

    public TViolation() {
    }

    @Override()
    public org.kie.dmn.feel.util.EvalHelper.PropertyValueResult getFEELProperty(java.lang.String property) {
        switch(property) {
            case "Code":
                return org.kie.dmn.feel.util.EvalHelper.PropertyValueResult.ofValue(this.getCode());
            case "Date":
                return org.kie.dmn.feel.util.EvalHelper.PropertyValueResult.ofValue(this.getDate());
            case "Type":
                return org.kie.dmn.feel.util.EvalHelper.PropertyValueResult.ofValue(this.getType());
            case "Speed Limit":
                return org.kie.dmn.feel.util.EvalHelper.PropertyValueResult.ofValue(this.getSpeed_32Limit());
            case "Actual Speed":
                return org.kie.dmn.feel.util.EvalHelper.PropertyValueResult.ofValue(this.getActual_32Speed());
            default:
                return org.kie.dmn.feel.util.EvalHelper.PropertyValueResult.notDefined();
        }
    }

    @Override()
    public void setFEELProperty(java.lang.String property, java.lang.Object value) {
        switch(property) {
            case "Code":
                this.setCode((java.lang.String) value);
                return;
            case "Date":
                this.setDate((java.time.LocalDate) value);
                return;
            case "Type":
                this.setType((java.lang.String) value);
                return;
            case "Speed Limit":
                this.setSpeed_32Limit((java.lang.Number) value);
                return;
            case "Actual Speed":
                this.setActual_32Speed((java.lang.Number) value);
                return;
        }
    }

    public void fromMap(java.util.Map<String, Object> values) {
        {
            Object propertyValues = values.get("Code");
            if (propertyValues != null) {
                code = (java.lang.String) propertyValues;
            }
        }
        {
            Object propertyValues = values.get("Date");
            if (propertyValues != null) {
                date = (java.time.LocalDate) propertyValues;
            }
        }
        {
            Object propertyValues = values.get("Type");
            if (propertyValues != null) {
                type = (java.lang.String) propertyValues;
            }
        }
        {
            Object propertyValues = values.get("Speed Limit");
            if (propertyValues != null) {
                speed_32Limit = (java.lang.Number) propertyValues;
            }
        }
        {
            Object propertyValues = values.get("Actual Speed");
            if (propertyValues != null) {
                actual_32Speed = (java.lang.Number) propertyValues;
            }
        }
    }

    @Override()
    public java.util.Map<String, Object> allFEELProperties() {
        java.util.Map<String, Object> result = new java.util.LinkedHashMap<>();
        {
            result.put("Code", this.getCode());
            result.put("Date", this.getDate());
            result.put("Type", this.getType());
            result.put("Speed Limit", this.getSpeed_32Limit());
            result.put("Actual Speed", this.getActual_32Speed());
        }
        return result;
    }

    private java.lang.String code;

    public void setCode(java.lang.String code) {
        this.code = code;
    }

    @org.kie.dmn.feel.lang.FEELProperty(value = "Code")
    @com.fasterxml.jackson.annotation.JsonProperty(value = "Code")
    public java.lang.String getCode() {
        return code;
    }

    private java.time.LocalDate date;

    public void setDate(java.time.LocalDate date) {
        this.date = date;
    }

    @org.kie.dmn.feel.lang.FEELProperty(value = "Date")
    @com.fasterxml.jackson.annotation.JsonProperty(value = "Date")
    public java.time.LocalDate getDate() {
        return date;
    }

    private java.lang.String type;

    public void setType(java.lang.String type) {
        this.type = type;
    }

    @org.kie.dmn.feel.lang.FEELProperty(value = "Type")
    @com.fasterxml.jackson.annotation.JsonProperty(value = "Type")
    @org.eclipse.microprofile.openapi.annotations.media.Schema(enumeration = {"A", "B"})
    public java.lang.String getType() {
        return type;
    }

    
    private java.lang.Number speed_32Limit;

    public void setSpeed_32Limit(java.lang.Number speed_32Limit) {
        this.speed_32Limit = speed_32Limit;
    }

    @org.kie.dmn.feel.lang.FEELProperty(value = "Speed Limit")
    @com.fasterxml.jackson.annotation.JsonProperty(value = "Speed Limit")
    public java.lang.Number getSpeed_32Limit() {
        return speed_32Limit;
    }

    private java.lang.Number actual_32Speed;

    public void setActual_32Speed(java.lang.Number actual_32Speed) {
        this.actual_32Speed = actual_32Speed;
    }

    @org.kie.dmn.feel.lang.FEELProperty(value = "Actual Speed")
    @com.fasterxml.jackson.annotation.JsonProperty(value = "Actual Speed")
    public java.lang.Number getActual_32Speed() {
        return actual_32Speed;
    }

    public TViolation(java.lang.String code, java.time.LocalDate date, java.lang.String type, java.lang.Number speed_32Limit, java.lang.Number actual_32Speed) {
        super();
        this.code = code;
        this.date = date;
        this.type = type;
        this.speed_32Limit = speed_32Limit;
        this.actual_32Speed = actual_32Speed;
    }

    @Override()
    public String toString() {
        return "TViolation" + "( " + "code=" + code + ", " + "date=" + date + ", " + "type=" + type + ", " + "speed_32Limit=" + speed_32Limit + ", " + "actual_32Speed=" + actual_32Speed + " )";
    }
}
