/*
This file was automatically generated by the Drools DMN open source engine Strongly Typed facility.
Do not modify this file, as any modifications will be lost when invoking the facility again.
Do not rely on the generated class(es) implementation, as the actual implementations may change.
Generated on: 2020-07-23T17:41:20.837663+02:00[Europe/Rome]

*/
package asd;

/**
 * A representation of the DMN defined ItemDefinition type 'tFine'.<br/>
 * <br/>
 * This has been automatically generated from the following DMN asset.<br/>
 * DMN namespace: https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF<br/>
 * DMN name: Traffic Violation<br/>
 *
 * @implNote
 * This file was automatically generated by the Drools DMN open source engine Strongly Typed facility.
 * Do not modify this file, as any modifications will be lost when invoking the facility again.
 * Do not rely on the generated class(es) implementation, as the actual implementations may change.
 * Generated on: 2020-07-23T17:41:20.837663+02:00[Europe/Rome]
 *
 * <br/>
 */
public class TFine implements java.io.Serializable, org.kie.dmn.api.core.FEELPropertyAccessible {

    public TFine() {
    }

    @Override()
    public org.kie.dmn.feel.util.EvalHelper.PropertyValueResult getFEELProperty(java.lang.String property) {
        switch(property) {
            case "Amount":
                return org.kie.dmn.feel.util.EvalHelper.PropertyValueResult.ofValue(this.getAmount());
            case "Points":
                return org.kie.dmn.feel.util.EvalHelper.PropertyValueResult.ofValue(this.getPoints());
            default:
                return org.kie.dmn.feel.util.EvalHelper.PropertyValueResult.notDefined();
        }
    }

    @Override()
    public void setFEELProperty(java.lang.String property, java.lang.Object value) {
        switch(property) {
            case "Amount":
                this.setAmount((java.lang.Number) value);
                return;
            case "Points":
                this.setPoints((java.lang.Number) value);
                return;
        }
    }

    public void fromMap(java.util.Map<String, Object> values) {
        {
            Object propertyValues = values.get("Amount");
            if (propertyValues != null) {
                amount = (java.lang.Number) propertyValues;
            }
        }
        {
            Object propertyValues = values.get("Points");
            if (propertyValues != null) {
                points = (java.lang.Number) propertyValues;
            }
        }
    }

    @Override()
    public java.util.Map<String, Object> allFEELProperties() {
        java.util.Map<String, Object> result = new java.util.LinkedHashMap<>();
        {
            result.put("Amount", this.getAmount());
            result.put("Points", this.getPoints());
        }
        return result;
    }

    private java.lang.Number amount;

    public void setAmount(java.lang.Number amount) {
        this.amount = amount;
    }

    @org.kie.dmn.feel.lang.FEELProperty(value = "Amount")
    @com.fasterxml.jackson.annotation.JsonProperty(value = "Amount")
    public java.lang.Number getAmount() {
        return amount;
    }

    private java.lang.Number points;

    public void setPoints(java.lang.Number points) {
        this.points = points;
    }

    @org.kie.dmn.feel.lang.FEELProperty(value = "Points")
    @com.fasterxml.jackson.annotation.JsonProperty(value = "Points")
    public java.lang.Number getPoints() {
        return points;
    }

    public TFine(java.lang.Number amount, java.lang.Number points) {
        super();
        this.amount = amount;
        this.points = points;
    }

    @Override()
    public String toString() {
        return "TFine" + "( " + "amount=" + amount + ", " + "points=" + points + " )";
    }
}
