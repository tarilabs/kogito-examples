/*
This file was automatically generated by the Drools DMN open source engine Strongly Typed facility.
Do not modify this file, as any modifications will be lost when invoking the facility again.
Do not rely on the generated class(es) implementation, as the actual implementations may change.
Generated on: 2020-07-23T17:41:20.837663+02:00[Europe/Rome]

*/
package asd;

/**
 * A representation of all the InputData and other DRG Requirement of the whole DMN 'Traffic Violation' inputs.<br/>
 * <br/>
 * This has been automatically generated from the following DMN asset.<br/>
 * DMN namespace: https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF<br/>
 * DMN name: Traffic Violation<br/>
 *
 * @implNote
 * This file was automatically generated by the Drools DMN open source engine Strongly Typed facility.
 * Do not modify this file, as any modifications will be lost when invoking the facility again.
 * Do not rely on the generated class(es) implementation, as the actual implementations may change.
 * Generated on: 2020-07-23T17:41:20.837663+02:00[Europe/Rome]
 *
 * <br/>
 */
public class InputSet implements java.io.Serializable, org.kie.dmn.api.core.FEELPropertyAccessible {

    public InputSet() {
    }

    @Override()
    public org.kie.dmn.feel.util.EvalHelper.PropertyValueResult getFEELProperty(java.lang.String property) {
        switch(property) {
            case "Violation":
                return org.kie.dmn.feel.util.EvalHelper.PropertyValueResult.ofValue(this.getViolation());
            case "Driver":
                return org.kie.dmn.feel.util.EvalHelper.PropertyValueResult.ofValue(this.getDriver());
            default:
                return org.kie.dmn.feel.util.EvalHelper.PropertyValueResult.notDefined();
        }
    }

    @Override()
    public void setFEELProperty(java.lang.String property, java.lang.Object value) {
        switch(property) {
            case "Violation":
                this.setViolation((asd.TViolation) value);
                return;
            case "Driver":
                this.setDriver((asd.TDriver) value);
                return;
        }
    }

    public void fromMap(java.util.Map<String, Object> values) {
        {
            Object propertyValues = values.get("Violation");
            if (propertyValues != null) {
                violation = new asd.TViolation();
                violation.fromMap((java.util.Map<String, Object>) propertyValues);
            }
        }
        {
            Object propertyValues = values.get("Driver");
            if (propertyValues != null) {
                driver = new asd.TDriver();
                driver.fromMap((java.util.Map<String, Object>) propertyValues);
            }
        }
    }

    @Override()
    public java.util.Map<String, Object> allFEELProperties() {
        java.util.Map<String, Object> result = new java.util.LinkedHashMap<>();
        {
            result.put("Violation", this.getViolation());
            result.put("Driver", this.getDriver());
        }
        return result;
    }

    private asd.TViolation violation;

    public void setViolation(asd.TViolation violation) {
        this.violation = violation;
    }

    @org.kie.dmn.feel.lang.FEELProperty(value = "Violation")
    @com.fasterxml.jackson.annotation.JsonProperty(value = "Violation")
    public asd.TViolation getViolation() {
        return violation;
    }

    private asd.TDriver driver;

    public void setDriver(asd.TDriver driver) {
        this.driver = driver;
    }

    @org.kie.dmn.feel.lang.FEELProperty(value = "Driver")
    @com.fasterxml.jackson.annotation.JsonProperty(value = "Driver")
    public asd.TDriver getDriver() {
        return driver;
    }

    public InputSet(asd.TViolation violation, asd.TDriver driver) {
        super();
        this.violation = violation;
        this.driver = driver;
    }

    @Override()
    public String toString() {
        return "InputSet" + "( " + "violation=" + violation + ", " + "driver=" + driver + " )";
    }
}
